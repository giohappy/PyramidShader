package edu.oregonstate.cartography.gui;

import edu.oregonstate.cartography.app.FileUtils;
import edu.oregonstate.cartography.grid.ESRIASCIIGridExporter;
import edu.oregonstate.cartography.grid.Grid;
import edu.oregonstate.cartography.grid.Model;
import static edu.oregonstate.cartography.grid.Model.ForegroundVisualization.ILLUMINATED_CONTOURS;
import edu.oregonstate.cartography.grid.WorldFileExporter;
import edu.oregonstate.cartography.grid.operators.IlluminatedContoursOperator;
import static edu.oregonstate.cartography.gui.SettingsPanel.RenderSpeed.REGULAR;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 * Shades a DEM generalizedGrid using weighted Laplacian Pyramids. Results are
 * displayed in this JFrame with options for user input.
 *
 * @author Charles Preppernau and Bernie Jenny, Oregon State University
 */
public class MainWindow extends javax.swing.JFrame {

    private static final String OPEN_ERROR_MESSAGE = "Could not open the terrain file.";
    private static final String SAVE_IMAGE_ERROR_MESSAGE = "Could not save the image file.";
    private static final String SAVE_TERRAIN_ERROR_MESSAGE = "Could not save the terrain file.";
    private static final String GEOGRAPHIC_CS_WARNING = "<html>"
            + "The grid seems to use a geographic coordinate system.<br>"
            + "Computed shadings and contours will not be correct. <br>"
            + "Please first project the grid to a Cartesian coordinate system.</html>";

    private final Model model;
    private SettingsDialog settingsDialog = null;

    /**
     * Constructor for the JFrame. Initializes components and sets up the
     * default color gradient.
     *
     * @param model model object
     */
    public MainWindow(Model model) {
        this.model = model;

        initComponents();  //Sets up the JFrame components with their properties

        // get menu keyboard events from owned dialogs
        DialogUtil.setupDialogActions(menuBar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageResolutionPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        imageResolutionSpinner = new javax.swing.JSpinner();
        navigableImagePanel = new edu.oregonstate.cartography.gui.NavigableImagePanel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem openMenuItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator1 = new javax.swing.JPopupMenu.Separator();
        saveTerrainMenuItem = new javax.swing.JMenuItem();
        saveLocalTerrainMenuItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator5 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenu saveImageMenu = new javax.swing.JMenu();
        saveTIFFImageMenuItem = new javax.swing.JMenuItem();
        savePNGImageMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu saveContoursMenu = new javax.swing.JMenu();
        saveTIFFContoursMenuItem = new javax.swing.JMenuItem();
        savePNGContoursMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        viewResetMenuItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator4 = new javax.swing.JPopupMenu.Separator();
        viewZoomInMenuItem = new javax.swing.JMenuItem();
        viewZoomOutMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu infoMenu = new javax.swing.JMenu();
        settingsMenuItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator3 = new javax.swing.JPopupMenu.Separator();
        terrainInfoMenuItem = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator2 = new javax.swing.JPopupMenu.Separator();
        infoMenuItem = new javax.swing.JMenuItem();

        imageResolutionPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Image resolution relative to terrain model size:");
        imageResolutionPanel.add(jLabel1, new java.awt.GridBagConstraints());

        imageResolutionSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        imageResolutionPanel.add(imageResolutionSpinner, new java.awt.GridBagConstraints());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pyramid Shader");
        setMinimumSize(new java.awt.Dimension(700, 700));

        navigableImagePanel.setNavigationImageEnabled(false);
        getContentPane().add(navigableImagePanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        fileMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                fileMenuMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });

        openMenuItem.setText("Open Terrain Model…");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);
        fileMenu.add(jSeparator1);

        saveTerrainMenuItem.setText("Save Generalized Terrain Model…");
        saveTerrainMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTerrainMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveTerrainMenuItem);

        saveLocalTerrainMenuItem.setText("Save Locally Filtered Terrain Model…");
        saveLocalTerrainMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLocalTerrainMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveLocalTerrainMenuItem);
        fileMenu.add(jSeparator5);

        saveImageMenu.setText("Save Image");

        saveTIFFImageMenuItem.setText("TIFF");
        saveTIFFImageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTIFFImageMenuItemActionPerformed(evt);
            }
        });
        saveImageMenu.add(saveTIFFImageMenuItem);

        savePNGImageMenuItem.setText("PNG");
        savePNGImageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePNGImageMenuItemActionPerformed(evt);
            }
        });
        saveImageMenu.add(savePNGImageMenuItem);

        fileMenu.add(saveImageMenu);

        saveContoursMenu.setText("Save Contour Image");

        saveTIFFContoursMenuItem.setText("TIFF");
        saveTIFFContoursMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTIFFContoursMenuItemActionPerformed(evt);
            }
        });
        saveContoursMenu.add(saveTIFFContoursMenuItem);

        savePNGContoursMenuItem.setText("PNG");
        savePNGContoursMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePNGContoursMenuItemActionPerformed(evt);
            }
        });
        saveContoursMenu.add(savePNGContoursMenuItem);

        fileMenu.add(saveContoursMenu);

        menuBar.add(fileMenu);

        viewMenu.setText("View");
        viewMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                viewMenuMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });

        viewResetMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        viewResetMenuItem.setText("Reset View");
        viewResetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewResetMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewResetMenuItem);
        viewMenu.add(jSeparator4);

        viewZoomInMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PLUS,    java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        viewZoomInMenuItem.setText("Zoom In");
        viewZoomInMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewZoomInMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewZoomInMenuItem);

        viewZoomOutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS,    java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        viewZoomOutMenuItem.setText("Zoom Out");
        viewZoomOutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewZoomOutMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(viewZoomOutMenuItem);

        menuBar.add(viewMenu);

        infoMenu.setText("Window");
        infoMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                infoMenuMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });

        settingsMenuItem.setText("Show Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        infoMenu.add(settingsMenuItem);
        infoMenu.add(jSeparator3);

        terrainInfoMenuItem.setText("Terrain Model Info");
        terrainInfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terrainInfoMenuItemActionPerformed(evt);
            }
        });
        infoMenu.add(terrainInfoMenuItem);
        infoMenu.add(jSeparator2);

        infoMenuItem.setText("Info");
        infoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoMenuItemActionPerformed(evt);
            }
        });
        infoMenu.add(infoMenuItem);

        menuBar.add(infoMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveImage(String format, String message) {
        String filePath = askFile(message, false);    //call up a save file dialog
        //Make sure the choice is a valid file
        if (filePath != null) {
            filePath = FileUtils.forceFileNameExtension(filePath, format);
            try {
                //Save the specified file as a PNG
                ImageIO.write(navigableImagePanel.getImage(), format, new File(filePath));

                // create world file for image file
                String worldFilePath = WorldFileExporter.constructPath(filePath);
                Grid dem = model.getGeneralizedGrid();
                double cellSize = dem.getCellSize();
                // for each grid value, one image cell is contructed. The extent
                // of the image is therefore one pixel larger horizontally and
                // vertically.
                double west = dem.getWest() - cellSize / 2;
                double north = dem.getNorth() + cellSize / 2;
                WorldFileExporter.writeWorldFile(worldFilePath, cellSize, west, north);
            } catch (IOException ex) {
                ErrorDialog.showErrorDialog(SAVE_IMAGE_ERROR_MESSAGE, "Error", ex, this);
            }
        }
    }
    private void saveTIFFImageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTIFFImageMenuItemActionPerformed
        saveImage("tif", "Save TIFF Image");
    }//GEN-LAST:event_saveTIFFImageMenuItemActionPerformed

    private void saveTerrainMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTerrainMenuItemActionPerformed
        saveTerrain(model.getGeneralizedGrid());
    }//GEN-LAST:event_saveTerrainMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        try {
            openGrid();
        } catch (IOException ex) {
            ErrorDialog.showErrorDialog(OPEN_ERROR_MESSAGE, "Error", ex, this);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void infoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoMenuItemActionPerformed
        ProgramInfoPanel.showApplicationInfo(this);
    }//GEN-LAST:event_infoMenuItemActionPerformed

    private void terrainInfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terrainInfoMenuItemActionPerformed
        StringBuilder sb = new StringBuilder();
        sb.append("<html> <b>");
        sb.append(getTitle());
        sb.append("</b><br>");
        sb.append(model.getGrid().getDescriptionWithStatistics("<br>"));
        String title = "Terrain Model Info";
        JOptionPane.showMessageDialog(this, sb.toString(), title, JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_terrainInfoMenuItemActionPerformed

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
        settingsDialog.setVisible(!settingsDialog.isVisible());
    }//GEN-LAST:event_settingsMenuItemActionPerformed

    private void infoMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_infoMenuMenuSelected
        boolean gridLoaded = (model.getGrid() != null);
        terrainInfoMenuItem.setEnabled(gridLoaded);

        boolean settingsVisible = settingsDialog.isVisible();
        settingsMenuItem.setText(settingsVisible ? "Hide Settings" : "Show Settings");
    }//GEN-LAST:event_infoMenuMenuSelected

    private void viewResetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewResetMenuItemActionPerformed
        navigableImagePanel.setZoom(0);
    }//GEN-LAST:event_viewResetMenuItemActionPerformed

    private void viewZoomInMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewZoomInMenuItemActionPerformed
        navigableImagePanel.setZoom(navigableImagePanel.getZoom() + navigableImagePanel.getZoomIncrement());
    }//GEN-LAST:event_viewZoomInMenuItemActionPerformed

    private void viewZoomOutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewZoomOutMenuItemActionPerformed
        navigableImagePanel.setZoom(navigableImagePanel.getZoom() - navigableImagePanel.getZoomIncrement());
    }//GEN-LAST:event_viewZoomOutMenuItemActionPerformed

    private void savePNGImageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePNGImageMenuItemActionPerformed
        saveImage("png", "Save PNG Image");
    }//GEN-LAST:event_savePNGImageMenuItemActionPerformed

    /**
     * Render an image and write it to a file, while a progress dialog with a
     * cancel button is displayed.
     *
     * @param filePath file to write to.
     * @param scale The final image will be this many times larger than the
     * terrain model.
     */
    private void exportContours(final String filePath, final String imageFormat, final int scale) {
        SwingWorkerWithProgressIndicator worker;
        String dialogTitle = "Illuminated Contours Export";
        worker = new SwingWorkerWithProgressIndicator<Void>(this, dialogTitle, "", true) {
            @Override
            public void done() {
                try {
                    // a call to get() will throw an ExecutionException if an 
                    // exception occured in doInBackground
                    get();

                    // create world file for image file
                    String worldFilePath = WorldFileExporter.constructPath(filePath);
                    Grid dem = model.getGeneralizedGrid();
                    double cellSize = dem.getCellSize();
                    double west = dem.getWest() - cellSize / 2;
                    double north = dem.getNorth() + cellSize / 2;
                    WorldFileExporter.writeWorldFile(worldFilePath, cellSize, west, north);
                } catch (ExecutionException e) {
                    // an exception was thrown in doInBackground
                    new File(filePath).delete();
                    String msg = "An error occured when exporting the image.";
                    String title = "Export Error";
                    JOptionPane.showMessageDialog(getContentPane(), msg, title, JOptionPane.ERROR_MESSAGE);
                } catch (InterruptedException | CancellationException e) {
                } catch (IOException exc) {
                    new File(filePath).delete();
                } finally {
                    // hide the progress dialog
                    completeProgress();
                }
            }

            @Override
            protected Void doInBackground() throws Exception {
                // initialize the progress dialog
                start();
                // compute the image with illuminated contours
                IlluminatedContoursOperator op;
                boolean illuminated = (model.foregroundVisualization == ILLUMINATED_CONTOURS);

                op = model.setupIlluminatedContoursOperator(illuminated);
                int w = model.getGeneralizedGrid().getCols() * scale;
                int h = model.getGeneralizedGrid().getRows() * scale;
                BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
                Graphics g = image.getGraphics();
                g.setColor(model.solidColor);
                g.fillRect(0, 0, w, h);
                g.dispose();
                op.renderToImage(image, model.getGeneralizedGrid(),
                        model.getGeneralizedSlopeGrid(), this);

                if (!isCancelled()) {
                    // writing to file cannot be canceled
                    disableCancel();
                    setIndeterminate(true);

                    File file = new File(filePath);
                    setMessage("Writing image to \"" + file.getName() + "\"");
                    ImageIO.write(image, imageFormat, file);
                }
                return null;
            }
        };

        worker.setMaxTimeWithoutDialogMilliseconds(500);
        worker.setIndeterminate(false);
        worker.setMessage("Computing illuminated contours image");
        worker.execute();
    }

    private void saveContours(String askFileMessage, String imageFormat) {
        String filePath = askFile(askFileMessage, false);
        if (filePath != null) {
            filePath = FileUtils.forceFileNameExtension(filePath, imageFormat);
            String title = "Image Resolution";
            int res = JOptionPane.showOptionDialog(getContentPane(), imageResolutionPanel, title,
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
            if (res == JOptionPane.OK_OPTION) {
                int scale = (Integer) (imageResolutionSpinner.getValue());
                exportContours(filePath, imageFormat, scale);
            }
        }
    }
    private void saveTIFFContoursMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTIFFContoursMenuItemActionPerformed
        saveContours("Save TIFF Contour Image", "tif");
    }//GEN-LAST:event_saveTIFFContoursMenuItemActionPerformed

    private void savePNGContoursMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePNGContoursMenuItemActionPerformed
        saveContours("Save PNG Contour Image", "png");
    }//GEN-LAST:event_savePNGContoursMenuItemActionPerformed

    private void fileMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_fileMenuMenuSelected
        boolean gridLoaded = (model.getGrid() != null);
        boolean contoursVisible
                = model.foregroundVisualization != Model.ForegroundVisualization.NONE;
        saveTerrainMenuItem.setEnabled(gridLoaded);
        saveLocalTerrainMenuItem.setEnabled(model.backgroundVisualization.isLocal());
        saveTIFFImageMenuItem.setEnabled(gridLoaded);
        savePNGImageMenuItem.setEnabled(gridLoaded);
        saveTIFFContoursMenuItem.setEnabled(contoursVisible);
        savePNGContoursMenuItem.setEnabled(contoursVisible);
    }//GEN-LAST:event_fileMenuMenuSelected

    private void viewMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_viewMenuMenuSelected
        boolean gridLoaded = (model.getGrid() != null);
        viewResetMenuItem.setEnabled(gridLoaded);
        viewZoomInMenuItem.setEnabled(gridLoaded);
        viewZoomOutMenuItem.setEnabled(gridLoaded);
    }//GEN-LAST:event_viewMenuMenuSelected

    private void saveLocalTerrainMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLocalTerrainMenuItemActionPerformed
        saveTerrain(model.getLocalGrid());
    }//GEN-LAST:event_saveLocalTerrainMenuItemActionPerformed

    /**
     * Ask the user for a file to read or write.
     *
     * @param frame A Frame for which to display the dialog.
     * @param message A message that will be displayed in the dialog.
     * @param load Pass true if an existing file for reading should be selected.
     * Pass false if a new file for writing should be specified.
     * @return A path to the file, including the file name.
     */
    private String askFile(String message, boolean load) {
        int flag = load ? java.awt.FileDialog.LOAD : java.awt.FileDialog.SAVE;

        // display the dialog
        java.awt.FileDialog fd = new java.awt.FileDialog(this, message, flag);
        fd.setVisible(true);

        // construct the path to the file that the user selected.
        String fileName = fd.getFile();
        String directory = fd.getDirectory();
        if (fileName == null || directory == null) {
            return null;
        }
        return directory + fileName;
    }

    public void openGrid() throws IOException {
        // ask the user for a file
        String filePath = askFile("Select an Esri ASCII Grid", true);
        if (filePath == null) {
            // user canceled
            return;
        }

        setTitle(filePath.substring(filePath.lastIndexOf(File.separator) + 1));

        initPyramidsGridWithProgressDialog(filePath);
    }

    private void initPyramidsGridWithProgressDialog(final String filePath) {
        SwingWorkerWithProgressIndicator worker;
        String dialogTitle = "Pyramid Shader";

        worker = new SwingWorkerWithProgressIndicator<Void>(this, dialogTitle, "", true) {

            @Override
            public void done() {
                try {
                    // a call to get() will throw an ExecutionException if an 
                    // exception occured in doInBackground
                    get();

                    BufferedImage image = model.createDestinationImage(1);
                    navigableImagePanel.setImage(model.renderBackgroundImage(image));
                    if (model.getGrid().getCellSize() < 0.1) {
                        completeProgress();
                        JOptionPane.showMessageDialog(getContentPane(), GEOGRAPHIC_CS_WARNING,
                                "Pyramid Shader Warning", JOptionPane.WARNING_MESSAGE);
                    }
                    settingsDialog.modelChanged();
                } catch (ExecutionException e) {
                    completeProgress();
                    // an exception was thrown in doInBackground
                    String msg = "<html>An error occured when importing the terrain model."
                            + "<br>The file must be in Esri ASCII Grid format.</html>";
                    String title = "Error";
                    ErrorDialog.showErrorDialog(msg, title, e, getContentPane());
                } catch (InterruptedException | CancellationException e) {
                } finally {
                    // hide the progress dialog
                    completeProgress();
                }
            }

            @Override
            protected Void doInBackground() throws Exception {
                start();
                //import the DEM and create pyramids
                model.setGrid(new Grid(filePath));
                return null;
            }

        };

        worker.setMaxTimeWithoutDialogMilliseconds(2000);
        worker.setIndeterminate(true);
        worker.disableCancel();
        worker.setMessage("Importing Terrain Model");
        worker.execute();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel imageResolutionPanel;
    private javax.swing.JSpinner imageResolutionSpinner;
    private javax.swing.JMenuItem infoMenuItem;
    private javax.swing.JMenuBar menuBar;
    private edu.oregonstate.cartography.gui.NavigableImagePanel navigableImagePanel;
    private javax.swing.JMenuItem saveLocalTerrainMenuItem;
    private javax.swing.JMenuItem savePNGContoursMenuItem;
    private javax.swing.JMenuItem savePNGImageMenuItem;
    private javax.swing.JMenuItem saveTIFFContoursMenuItem;
    private javax.swing.JMenuItem saveTIFFImageMenuItem;
    private javax.swing.JMenuItem saveTerrainMenuItem;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JMenuItem terrainInfoMenuItem;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JMenuItem viewResetMenuItem;
    private javax.swing.JMenuItem viewZoomInMenuItem;
    private javax.swing.JMenuItem viewZoomOutMenuItem;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the model
     */
    public Model getModel() {
        return model;
    }

    public void setImage(BufferedImage image) {
        // setImage changes the current zoom level and the central point
        // if possible avoid calling setImage therefore.
        if (image == navigableImagePanel.getImage()) {
            navigableImagePanel.repaint();
        } else {
            navigableImagePanel.setImage(image);
        }
    }

    public BufferedImage getImage() {
        return navigableImagePanel.getImage();
    }

    void setPreferredImageSize(Dimension dimension) {
        navigableImagePanel.setPreferredSize(dimension);
    }

    /**
     * @param settingsDialog the settingsDialog to set
     */
    public void setSettingsDialog(SettingsDialog settingsDialog) {
        this.settingsDialog = settingsDialog;
    }

    private void saveTerrain(Grid grid) {
        //call up a save file dialog
        String filePath = askFile("Save Terrain File", false);
        if (filePath != null) {
            filePath = FileUtils.forceFileNameExtension(filePath, "asc");
            try {
                ESRIASCIIGridExporter.export(grid, filePath);
            } catch (IOException ex) {
                ErrorDialog.showErrorDialog(SAVE_TERRAIN_ERROR_MESSAGE, "Error", ex, this);
            }
        }
    }
}
